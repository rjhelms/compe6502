;
; File generated by cc65 v 2.19 - Git fcda94f
;
	.fopt		compiler,"cc65 v 2.19 - Git fcda94f"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_clrscr
	.import		_kbhit
	.import		_cputc
	.import		_cprintf
	.import		_cgetc
	.import		_rand
	.import		_srand
	.export		_word_list
	.export		_hangman_top
	.export		_hangman_bottom
	.export		_hangman
	.export		_seed
	.export		_word_index
	.export		_input
	.export		_word
	.export		_word_length
	.export		_guess
	.export		_word_ptr
	.export		_letters_guessed
	.export		_word_found
	.export		_game_won
	.export		_build_word_ptr
	.export		_welcome
	.export		_init_game
	.export		_draw_hangman
	.export		_draw_screen
	.export		_get_guess
	.export		_check_guess
	.export		_end_screen
	.export		_play_game
	.export		_main

.segment	"DATA"

_word_list:
	.byte	$61,$62,$69,$64,$69,$6E,$67,$00,$61,$62,$6C,$65,$00,$61,$62,$72
	.byte	$61,$73,$69,$76,$65,$00,$61,$62,$75,$6E,$64,$61,$6E,$74,$00,$61
	.byte	$64,$76,$69,$73,$65,$00,$61,$69,$72,$00,$61,$6C,$63,$6F,$68,$6F
	.byte	$6C,$69,$63,$00,$61,$6C,$69,$76,$65,$00,$61,$6C,$6C,$75,$72,$69
	.byte	$6E,$67,$00,$61,$6E,$61,$6C,$79,$7A,$65,$00,$61,$6E,$69,$6D,$61
	.byte	$6C,$00,$61,$70,$6F,$6C,$6F,$67,$69,$73,$65,$00,$61,$70,$70,$72
	.byte	$65,$63,$69,$61,$74,$65,$00,$61,$72,$67,$75,$65,$00,$61,$74,$74
	.byte	$61,$63,$6B,$00,$61,$74,$74,$65,$6E,$64,$00,$61,$74,$74,$72,$61
	.byte	$63,$74,$69,$76,$65,$00,$61,$76,$61,$69,$6C,$61,$62,$6C,$65,$00
	.byte	$61,$76,$6F,$69,$64,$00,$62,$61,$73,$6B,$65,$74,$62,$61,$6C,$6C
	.byte	$00,$62,$65,$61,$75,$74,$69,$66,$75,$6C,$00,$62,$65,$65,$66,$00
	.byte	$62,$65,$6C,$69,$65,$76,$65,$00,$62,$69,$74,$65,$00,$62,$6F,$72
	.byte	$72,$6F,$77,$00,$62,$72,$65,$61,$6B,$61,$62,$6C,$65,$00,$62,$72
	.byte	$69,$65,$66,$00,$62,$72,$75,$73,$68,$00,$62,$75,$6C,$62,$00,$62
	.byte	$75,$73,$68,$65,$73,$00,$62,$75,$73,$69,$6E,$65,$73,$73,$00,$62
	.byte	$75,$73,$74,$6C,$69,$6E,$67,$00,$63,$61,$6C,$63,$75,$6C,$61,$74
	.byte	$6F,$72,$00,$63,$61,$6D,$65,$72,$61,$00,$63,$61,$73,$74,$00,$63
	.byte	$61,$74,$74,$6C,$65,$00,$63,$68,$75,$62,$62,$79,$00,$63,$6C,$61
	.byte	$73,$73,$79,$00,$63,$6C,$6F,$73,$65,$00,$63,$6C,$6F,$74,$68,$00
	.byte	$63,$6C,$6F,$76,$65,$72,$00,$63,$6F,$6C,$64,$00,$63,$6F,$6C,$6C
	.byte	$61,$72,$00,$63,$6F,$6C,$6F,$72,$00,$63,$6F,$6D,$6D,$6F,$6E,$00
	.byte	$63,$6F,$6D,$70,$6C,$65,$78,$00,$63,$6F,$6E,$63,$65,$72,$6E,$65
	.byte	$64,$00,$63,$6F,$72,$72,$65,$63,$74,$00,$63,$6F,$76,$65,$72,$00
	.byte	$63,$72,$61,$63,$6B,$65,$72,$00,$63,$72,$65,$64,$69,$74,$00,$63
	.byte	$72,$75,$73,$68,$00,$63,$75,$72,$69,$6F,$75,$73,$00,$63,$75,$73
	.byte	$68,$69,$6F,$6E,$00,$63,$79,$63,$6C,$65,$00,$64,$61,$66,$66,$79
	.byte	$00,$64,$65,$66,$65,$63,$74,$69,$76,$65,$00,$64,$65,$6C,$69,$67
	.byte	$68,$74,$00,$64,$65,$72,$61,$6E,$67,$65,$64,$00,$64,$65,$74,$61
	.byte	$69,$6C,$65,$64,$00,$64,$65,$76,$65,$6C,$6F,$70,$6D,$65,$6E,$74
	.byte	$00,$64,$69,$72,$74,$00,$64,$69,$73,$74,$61,$6E,$63,$65,$00,$64
	.byte	$69,$76,$69,$64,$65,$00,$64,$6F,$63,$74,$6F,$72,$00,$64,$6F,$75
	.byte	$62,$6C,$65,$00,$64,$6F,$75,$62,$74,$00,$64,$6F,$77,$6E,$74,$6F
	.byte	$77,$6E,$00,$64,$72,$6F,$70,$00,$65,$61,$72,$73,$70,$6C,$69,$74
	.byte	$74,$69,$6E,$67,$00,$65,$67,$67,$73,$00,$65,$69,$67,$68,$74,$00
	.byte	$65,$6E,$64,$00,$65,$6E,$76,$69,$6F,$75,$73,$00,$65,$72,$72,$6F
	.byte	$72,$00,$65,$78,$75,$6C,$74,$61,$6E,$74,$00,$66,$61,$64,$65,$00
	.byte	$66,$61,$64,$65,$64,$00,$66,$61,$69,$74,$68,$66,$75,$6C,$00,$66
	.byte	$61,$72,$00,$66,$65,$72,$74,$69,$6C,$65,$00,$66,$69,$65,$6C,$64
	.byte	$00,$66,$69,$65,$72,$63,$65,$00,$66,$69,$72,$73,$74,$00,$66,$6C
	.byte	$61,$67,$72,$61,$6E,$74,$00,$66,$6C,$65,$73,$68,$00,$66,$6F,$6F
	.byte	$6C,$69,$73,$68,$00,$66,$6F,$75,$6E,$64,$00,$66,$72,$61,$6D,$65
	.byte	$00,$66,$72,$69,$65,$6E,$64,$6C,$79,$00,$66,$72,$6F,$67,$00,$66
	.byte	$72,$6F,$6E,$74,$00,$66,$75,$6C,$6C,$00,$66,$75,$74,$75,$72,$65
	.byte	$00,$66,$75,$7A,$7A,$79,$00,$67,$61,$74,$65,$00,$67,$61,$75,$64
	.byte	$79,$00,$67,$6C,$69,$73,$74,$65,$6E,$69,$6E,$67,$00,$67,$72,$61
	.byte	$62,$00,$67,$72,$61,$6E,$64,$6D,$6F,$74,$68,$65,$72,$00,$67,$72
	.byte	$61,$74,$65,$00,$67,$72,$65,$61,$73,$65,$00,$67,$72,$65,$65,$74
	.byte	$00,$67,$72,$69,$6E,$00,$67,$72,$6F,$75,$70,$00,$68,$61,$6E,$64
	.byte	$73,$00,$68,$61,$6E,$64,$73,$6F,$6D,$65,$00,$68,$61,$72,$61,$73
	.byte	$73,$00,$68,$65,$61,$6C,$00,$68,$69,$6C,$6C,$00,$68,$69,$73,$74
	.byte	$6F,$72,$79,$00,$68,$75,$6D,$00,$68,$79,$64,$72,$61,$6E,$74,$00
	.byte	$69,$6E,$63,$61,$6E,$64,$65,$73,$63,$65,$6E,$74,$00,$69,$6E,$63
	.byte	$6F,$6D,$65,$00,$6A,$65,$61,$6C,$6F,$75,$73,$00,$6A,$6F,$6B,$65
	.byte	$00,$6A,$75,$6D,$70,$79,$00,$6B,$61,$70,$75,$74,$00,$6B,$6E,$6F
	.byte	$77,$6C,$65,$64,$67,$65,$00,$6C,$61,$62,$6F,$72,$65,$72,$00,$6C
	.byte	$61,$6E,$64,$00,$6C,$61,$6E,$67,$75,$61,$67,$65,$00,$6C,$61,$73
	.byte	$74,$00,$6C,$61,$75,$67,$68,$00,$6C,$65,$61,$72,$6E,$65,$64,$00
	.byte	$6C,$65,$76,$65,$6C,$00,$6C,$69,$6E,$65,$6E,$00,$6C,$6F,$61,$66
	.byte	$00,$6C,$6F,$6E,$67,$00,$6C,$6F,$73,$73,$00,$6C,$6F,$76,$65,$6C
	.byte	$79,$00,$6C,$6F,$77,$00,$6C,$79,$69,$6E,$67,$00,$6D,$61,$63,$68
	.byte	$69,$6E,$65,$00,$6D,$61,$69,$6C,$62,$6F,$78,$00,$6D,$61,$6B,$65
	.byte	$73,$68,$69,$66,$74,$00,$6D,$61,$6D,$6D,$6F,$74,$68,$00,$6D,$61
	.byte	$72,$6B,$65,$74,$00,$6D,$61,$72,$72,$69,$65,$64,$00,$6D,$61,$74
	.byte	$75,$72,$65,$00,$6D,$65,$61,$6E,$00,$6D,$65,$64,$69,$63,$61,$6C
	.byte	$00,$6D,$65,$73,$73,$79,$00,$6D,$69,$64,$64,$6C,$65,$00,$6D,$69
	.byte	$6C,$6B,$00,$6D,$69,$6E,$65,$00,$6D,$6F,$6C,$64,$79,$00,$6E,$61
	.byte	$74,$75,$72,$61,$6C,$00,$6E,$69,$63,$65,$00,$6E,$6F,$73,$74,$61
	.byte	$6C,$67,$69,$63,$00,$6E,$6F,$73,$79,$00,$6F,$76,$65,$72,$66,$6C
	.byte	$6F,$77,$00,$70,$61,$69,$6E,$73,$74,$61,$6B,$69,$6E,$67,$00,$70
	.byte	$61,$6C,$74,$72,$79,$00,$70,$65,$65,$70,$00,$70,$65,$6E,$63,$69
	.byte	$6C,$00,$70,$65,$72,$66,$6F,$72,$6D,$00,$70,$65,$74,$00,$70,$69
	.byte	$6E,$65,$00,$70,$69,$6E,$6B,$00,$70,$6C,$61,$63,$69,$64,$00,$70
	.byte	$6C,$61,$6E,$00,$70,$6C,$6F,$74,$00,$70,$6F,$73,$74,$00,$70,$6F
	.byte	$74,$00,$70,$72,$65,$76,$69,$6F,$75,$73,$00,$70,$72,$69,$63,$65
	.byte	$00,$70,$72,$6F,$74,$65,$63,$74,$69,$76,$65,$00,$70,$75,$6C,$6C
	.byte	$00,$70,$75,$6E,$69,$73,$68,$6D,$65,$6E,$74,$00,$71,$75,$61,$72
	.byte	$72,$65,$6C,$73,$6F,$6D,$65,$00,$71,$75,$69,$63,$6B,$00,$71,$75
	.byte	$69,$63,$6B,$73,$61,$6E,$64,$00,$72,$61,$62,$62,$69,$74,$73,$00
	.byte	$72,$61,$69,$6E,$73,$74,$6F,$72,$6D,$00,$72,$61,$72,$65,$00,$72
	.byte	$65,$61,$63,$68,$00,$72,$65,$61,$64,$69,$6E,$67,$00,$72,$65,$63
	.byte	$65,$69,$76,$65,$00,$72,$65,$63,$6F,$72,$64,$00,$72,$65,$66,$75
	.byte	$73,$65,$00,$72,$65,$67,$72,$65,$74,$00,$72,$65,$6C,$69,$67,$69
	.byte	$6F,$6E,$00,$72,$65,$6D,$69,$6E,$69,$73,$63,$65,$6E,$74,$00,$72
	.byte	$65,$73,$70,$6F,$6E,$73,$69,$62,$6C,$65,$00,$72,$65,$74,$69,$72
	.byte	$65,$00,$72,$69,$76,$65,$72,$00,$72,$6F,$62,$69,$6E,$00,$72,$6F
	.byte	$6F,$6D,$79,$00,$72,$6F,$74,$00,$73,$61,$6D,$65,$00,$73,$61,$6E
	.byte	$64,$00,$73,$61,$73,$73,$79,$00,$73,$63,$61,$72,$79,$00,$73,$63
	.byte	$69,$65,$6E,$63,$65,$00,$73,$63,$72,$75,$62,$00,$73,$65,$6E,$73
	.byte	$65,$00,$73,$68,$65,$65,$74,$00,$73,$68,$79,$00,$73,$69,$6C,$65
	.byte	$6E,$74,$00,$73,$69,$6D,$70,$6C,$65,$00,$73,$69,$6E,$00,$73,$6E
	.byte	$6F,$77,$00,$73,$70,$6F,$69,$6C,$00,$73,$71,$75,$65,$61,$6D,$69
	.byte	$73,$68,$00,$73,$74,$61,$6D,$70,$00,$73,$74,$65,$70,$00,$73,$74
	.byte	$69,$6E,$67,$79,$00,$73,$75,$63,$63,$65,$65,$64,$00,$73,$75,$66
	.byte	$66,$65,$72,$00,$73,$75,$70,$65,$72,$62,$00,$73,$75,$70,$65,$72
	.byte	$66,$69,$63,$69,$61,$6C,$00,$73,$77,$65,$61,$74,$65,$72,$00,$73
	.byte	$77,$65,$6C,$74,$65,$72,$69,$6E,$67,$00,$74,$65,$61,$73,$65,$00
	.byte	$74,$65,$64,$69,$6F,$75,$73,$00,$74,$65,$65,$74,$68,$00,$74,$65
	.byte	$6C,$65,$70,$68,$6F,$6E,$65,$00,$74,$65,$6E,$00,$74,$68,$72,$6F
	.byte	$61,$74,$00,$74,$68,$72,$6F,$6E,$65,$00,$74,$6F,$6D,$61,$74,$6F
	.byte	$65,$73,$00,$74,$6F,$75,$67,$68,$00,$74,$72,$61,$63,$65,$00,$74
	.byte	$72,$61,$69,$6E,$73,$00,$74,$72,$61,$70,$00,$74,$72,$61,$76,$65
	.byte	$6C,$00,$74,$72,$65,$61,$74,$00,$74,$72,$65,$65,$00,$74,$72,$65
	.byte	$6D,$65,$6E,$64,$6F,$75,$73,$00,$74,$72,$69,$63,$6B,$79,$00,$74
	.byte	$77,$6F,$00,$75,$6E,$63,$6F,$76,$65,$72,$65,$64,$00,$75,$6E,$64
	.byte	$65,$73,$69,$72,$61,$62,$6C,$65,$00,$75,$6E,$72,$75,$6C,$79,$00
	.byte	$75,$70,$62,$65,$61,$74,$00,$76,$61,$73,$65,$00,$76,$65,$67,$65
	.byte	$74,$61,$62,$6C,$65,$00,$76,$65,$6E,$6F,$6D,$6F,$75,$73,$00,$76
	.byte	$69,$73,$69,$74,$6F,$72,$00,$76,$6F,$72,$61,$63,$69,$6F,$75,$73
	.byte	$00,$77,$61,$6C,$6C,$00,$77,$61,$6E,$64,$65,$72,$69,$6E,$67,$00
	.byte	$77,$61,$72,$6D,$00,$77,$61,$73,$68,$00,$77,$61,$73,$74,$65,$00
	.byte	$77,$65,$61,$72,$79,$00,$77,$65,$69,$67,$68,$00,$77,$65,$69,$67
	.byte	$68,$74,$00,$77,$65,$6C,$63,$6F,$6D,$65,$00,$77,$68,$65,$65,$6C
	.byte	$00,$77,$69,$64,$65,$00,$77,$69,$6C,$64,$65,$72,$6E,$65,$73,$73
	.byte	$00,$77,$6F,$6F,$64,$65,$6E,$00,$79,$61,$6D,$00
_seed:
	.word	$0000
_word_index:
	.byte	$00
_input:
	.byte	$00
_word_length:
	.byte	$00
_guess:
	.byte	$00

.segment	"RODATA"

_hangman_top:
	.byte	$20,$2B,$2D,$2D,$2D,$2B,$0D,$0A,$20,$7C,$20,$20,$20,$00
_hangman_bottom:
	.byte	$0D,$0A,$20,$7C,$0D,$0A,$2D,$2B,$2D,$2D,$2D,$2D,$00
_hangman:
	.byte	$0D,$0A,$20,$7C,$0D,$0A,$20,$7C,$0D,$0A,$20,$7C,$00
	.res	19,$00
	.byte	$4F,$0D,$0A,$20,$7C,$0D,$0A,$20,$7C,$0D,$0A,$20,$7C,$00
	.res	18,$00
	.byte	$4F,$0D,$0A,$20,$7C,$20,$20,$20,$7C,$0D,$0A,$20,$7C,$20,$20,$20
	.byte	$7C,$0D,$0A,$20,$7C,$00
	.res	10,$00
	.byte	$4F,$0D,$0A,$20,$7C,$20,$20,$5C,$7C,$0D,$0A,$20,$7C,$20,$20,$20
	.byte	$7C,$0D,$0A,$20,$7C,$00
	.res	10,$00
	.byte	$4F,$0D,$0A,$20,$7C,$20,$20,$5C,$7C,$2F,$0D,$0A,$20,$7C,$20,$20
	.byte	$20,$7C,$0D,$0A,$20,$7C,$00
	.res	9,$00
	.byte	$4F,$0D,$0A,$20,$7C,$20,$20,$5C,$7C,$2F,$0D,$0A,$20,$7C,$20,$20
	.byte	$20,$7C,$0D,$0A,$20,$7C,$20,$20,$2F,$00
	.res	6,$00
	.byte	$4F,$0D,$0A,$20,$7C,$20,$20,$5C,$7C,$2F,$0D,$0A,$20,$7C,$20,$20
	.byte	$20,$7C,$0D,$0A,$20,$7C,$20,$20,$2F,$20,$5C,$00
	.res	4,$00
S0017:
	.byte	$59,$6F,$75,$20,$61,$6C,$72,$65,$61,$64,$79,$20,$67,$75,$65,$73
	.byte	$73,$65,$64,$20,$74,$68,$61,$74,$21,$0D,$0A,$00
S0018:
	.byte	$50,$6C,$65,$61,$73,$65,$20,$65,$6E,$74,$65,$72,$20,$61,$20,$6C
	.byte	$65,$74,$74,$65,$72,$21,$0D,$0A,$00
S000F:
	.byte	$50,$72,$65,$73,$73,$20,$61,$6E,$79,$20,$6B,$65,$79,$20,$74,$6F
	.byte	$20,$62,$65,$67,$69,$6E,$0D,$0A,$00
S000E:
	.byte	$42,$75,$69,$6C,$64,$69,$6E,$67,$20,$77,$6F,$72,$64,$20,$6C,$69
	.byte	$73,$74,$2E,$2E,$2E,$0D,$0A,$0A,$00
S0011:
	.byte	$0D,$0A,$0A,$52,$65,$6D,$61,$69,$6E,$69,$6E,$67,$20,$6C,$65,$74
	.byte	$74,$65,$72,$73,$3A,$0D,$0A,$00
S0015:
	.byte	$54,$68,$65,$20,$77,$6F,$72,$64,$20,$77,$61,$73,$20,$0D,$0A,$0A
	.byte	$25,$73,$0D,$0A,$0A,$00
S000C:
	.byte	$32,$30,$32,$31,$20,$52,$6F,$62,$20,$48,$61,$69,$6C,$6D,$61,$6E
	.byte	$0D,$0A,$0A,$00
S0019:
	.byte	$50,$6C,$61,$79,$20,$61,$67,$61,$69,$6E,$3F,$20,$28,$59,$2F,$4E
	.byte	$29,$00
S0016:
	.byte	$47,$75,$65,$73,$73,$20,$61,$20,$6C,$65,$74,$74,$65,$72,$0D,$0A
	.byte	$00
S0014:
	.byte	$47,$61,$6D,$65,$20,$6F,$76,$65,$72,$21,$0D,$0A,$0A,$00
S000B:
	.byte	$0D,$0A,$48,$41,$4E,$47,$4D,$41,$4E,$0D,$0A,$0A,$00
S0013:
	.byte	$59,$6F,$75,$20,$77,$6F,$6E,$21,$0D,$0A,$0A,$00
S0010	:=	S000E+21
S0012	:=	S000E+21
S000D	:=	S000E+21

.segment	"BSS"

_word:
	.res	2,$00
_word_ptr:
	.res	512,$00
_letters_guessed:
	.res	26,$00
_word_found:
	.res	16,$00
_game_won:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ build_word_ptr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_build_word_ptr: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	lda     #<(_word_list)
	ldx     #>(_word_list)
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0009
	inx
	clc
L0009:	adc     #<(_word_ptr)
	sta     ptr1
	txa
	adc     #>(_word_ptr)
	sta     ptr1+1
	jsr     ldax0sp
	jmp     L0013
L0002:	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L0005
	ldy     #$02
	tax
	lda     (sp),y
	asl     a
	bcc     L000A
	inx
	clc
L000A:	adc     #<(_word_ptr)
	sta     ptr1
	txa
	adc     #>(_word_ptr)
	sta     ptr1+1
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
L0013:	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	iny
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
L0005:	ldy     #$02
	lda     (sp),y
	bne     L0002
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ welcome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_welcome: near

.segment	"CODE"

	jsr     _clrscr
	lda     #<(S000B)
	ldx     #>(S000B)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     #<(S000C)
	ldx     #>(S000C)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     #<(_hangman_top)
	ldx     #>(_hangman_top)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     #<(_hangman+192)
	ldx     #>(_hangman+192)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     #<(_hangman_bottom)
	ldx     #>(_hangman_bottom)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     #<(S000D)
	ldx     #>(S000D)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     #<(S000E)
	ldx     #>(S000E)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	jsr     _build_word_ptr
	lda     #<(S000F)
	ldx     #>(S000F)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	jmp     L0004
L0002:	inc     _seed
	bne     L0004
	inc     _seed+1
L0004:	jsr     _kbhit
	tax
	beq     L0002
	jsr     _cgetc
	jsr     _clrscr
	lda     _seed
	ldx     _seed+1
	jmp     _srand

.endproc

; ---------------------------------------------------------------
; void __near__ init_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_game: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	jsr     _rand
	stx     _word_index
	cpx     #$80
	ldx     #$00
	lda     _word_index
	asl     a
	bcc     L0012
	inx
	clc
L0012:	adc     #<(_word_ptr)
	tay
	txa
	adc     #>(_word_ptr)
	tax
	tya
	jsr     ldaxi
	sta     _word
	stx     _word+1
	lda     #$00
	sta     _guess
	sta     _word_length
	tay
L0010:	sta     (sp),y
	cmp     #$10
	bcs     L0014
	lda     (sp),y
	tay
	lda     #$00
	sta     _word_found,y
	lda     _word+1
	sta     ptr1+1
	lda     _word
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	tay
	lda     (ptr1),y
	beq     L0015
	inc     _word_length
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0010
L0014:	tya
L0015:	tay
L0011:	sta     (sp),y
	cmp     #$1A
	bcs     L0016
	lda     (sp),y
	tay
	lda     #$00
	sta     _letters_guessed,y
	tay
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0011
L0016:	sty     _game_won
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ draw_hangman (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_hangman: near

.segment	"CODE"

	lda     #<(_hangman_top)
	ldx     #>(_hangman_top)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	ldx     #$00
	lda     _guess
	jsr     aslax4
	jsr     aslax1
	clc
	adc     #<(_hangman)
	tay
	txa
	adc     #>(_hangman)
	tax
	tya
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     #<(_hangman_bottom)
	ldx     #>(_hangman_bottom)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     #<(S0010)
	ldx     #>(S0010)
	jsr     pushax
	ldy     #$02
	jmp     _cprintf

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	jsr     _clrscr
	jsr     _draw_hangman
	lda     #$00
	tay
L0011:	sta     (sp),y
	cmp     _word_length
	bcs     L0003
	lda     (sp),y
	tay
	lda     _word_found,y
	beq     L0014
	lda     _word+1
	sta     ptr1+1
	lda     _word
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	tay
	lda     (ptr1),y
	jmp     L0010
L0014:	lda     #$5F
L0010:	jsr     _cputc
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0011
L0003:	lda     #<(S0011)
	ldx     #>(S0011)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     #$00
	tay
L0013:	sta     (sp),y
	cmp     #$1A
	bcs     L000A
	lda     (sp),y
	tay
	lda     _letters_guessed,y
	cmp     #$01
	bne     L000D
	lda     #$20
	jmp     L0012
L000D:	ldx     #$00
	lda     (sp,x)
	ldy     #$61
	jsr     incaxy
L0012:	jsr     _cputc
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0013
L000A:	lda     #<(S0012)
	ldx     #>(S0012)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; char __near__ get_guess (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_guess: near

.segment	"CODE"

	jsr     decsp1
	jsr     _cgetc
	ldy     #$00
	sta     (sp),y
	cmp     #$61
	bcs     L0005
	clc
	lda     #$20
	adc     (sp),y
	sta     (sp),y
L0005:	lda     (sp),y
	cmp     #$61
	jsr     boolult
	sta     ptr1
	lda     _input
	cmp     #$7B
	txa
	rol     a
	ora     ptr1
	pha
	pla
	beq     L0007
	txa
	sta     (sp),y
L0007:	lda     (sp),y
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ check_guess (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_guess: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	jsr     pusha
	tay
L0010:	sta     (sp),y
	cmp     _word_length
	bcs     L0003
	lda     _word+1
	sta     ptr1+1
	lda     _word
	sta     ptr1
	lda     (sp),y
	tay
	lda     (ptr1),y
	cmp     _input
	bne     L0004
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	dey
	lda     (sp),y
	tay
	lda     #$01
	sta     _word_found,y
L0004:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0010
L0003:	iny
	lda     (sp),y
	bne     L0012
	tax
	tya
	jmp     L0009
L0012:	sty     _game_won
	lda     #$00
	dey
L0011:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	cmp     _word_length
	bcs     L0013
	tay
	lda     _word_found,y
	bne     L000C
	sta     _game_won
L000C:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0011
L0013:	txa
L0009:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ end_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_end_screen: near

.segment	"CODE"

	jsr     _clrscr
	jsr     _draw_hangman
	lda     _game_won
	beq     L0002
	lda     #<(S0013)
	ldx     #>(S0013)
	jmp     L0006
L0002:	lda     #<(S0014)
	ldx     #>(S0014)
L0006:	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     #<(S0015)
	ldx     #>(S0015)
	jsr     pushax
	lda     _word
	ldx     _word+1
	jsr     pushax
	ldy     #$04
	jmp     _cprintf

.endproc

; ---------------------------------------------------------------
; int __near__ play_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_play_game: near

.segment	"CODE"

	jsr     decsp1
	jsr     _init_game
	jmp     L000C
L0002:	jsr     _draw_screen
	lda     #$00
	tay
	sta     (sp),y
	jmp     L0014
L0005:	lda     #<(S0016)
	ldx     #>(S0016)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	jsr     _get_guess
	sta     _input
	lda     _input
	beq     L0008
	ldx     #$00
	lda     _input
	ldy     #$61
	jsr     decaxy
	sta     ptr1
	txa
	clc
	adc     #>(_letters_guessed)
	sta     ptr1+1
	ldy     #<(_letters_guessed)
	lda     (ptr1),y
	beq     L0012
	jsr     _draw_screen
	lda     #<(S0017)
	ldx     #>(S0017)
	jmp     L0017
L0012:	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L0014
L0008:	jsr     _draw_screen
	lda     #<(S0018)
	ldx     #>(S0018)
L0017:	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	ldy     #$00
L0014:	lda     (sp),y
	beq     L0005
	ldx     #$00
	lda     _input
	ldy     #$61
	jsr     decaxy
	clc
	adc     #<(_letters_guessed)
	sta     ptr1
	txa
	adc     #>(_letters_guessed)
	sta     ptr1+1
	lda     #$01
	ldy     #$00
	sta     (ptr1),y
	jsr     _check_guess
	clc
	adc     _guess
	sta     _guess
	lda     _game_won
	bne     L0003
L000C:	lda     _guess
	cmp     #$06
	jcc     L0002
L0003:	jsr     _end_screen
	lda     #$00
	sta     _input
	lda     #<(S0019)
	ldx     #>(S0019)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	jmp     L000F
L000D:	jsr     _get_guess
	sta     _input
L000F:	lda     _input
	cmp     #$79
	jsr     boolne
	sta     ptr1
	lda     _input
	cmp     #$6E
	jsr     boolne
	and     ptr1
	pha
	pla
	bne     L000D
	lda     _input
	cmp     #$79
	bne     L0015
	lda     #$01
	jmp     L0001
L0015:	txa
L0001:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     _welcome
L0002:	jsr     _play_game
	stx     tmp1
	ora     tmp1
	bne     L0002
	tax
	rts

.endproc

